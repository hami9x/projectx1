// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: clientinfo.proto

#ifndef PROTOBUF_clientinfo_2eproto__INCLUDED
#define PROTOBUF_clientinfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_clientinfo_2eproto();
void protobuf_AssignDesc_clientinfo_2eproto();
void protobuf_ShutdownFile_clientinfo_2eproto();

class ClientInfo;

// ===================================================================

class ClientInfo : public ::google::protobuf::MessageLite {
 public:
  ClientInfo();
  virtual ~ClientInfo();

  ClientInfo(const ClientInfo& from);

  inline ClientInfo& operator=(const ClientInfo& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientInfo& default_instance();

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  // Returns the internal default instance pointer. This function can
  // return NULL thus should not be used by the user. This is intended
  // for Protobuf internal code. Please use default_instance() declared
  // above instead.
  static inline const ClientInfo* internal_default_instance() {
    return default_instance_;
  }
  #endif

  void Swap(ClientInfo* other);

  // implements Message ----------------------------------------------

  ClientInfo* New() const;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from);
  void CopyFrom(const ClientInfo& from);
  void MergeFrom(const ClientInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::std::string GetTypeName() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 player = 1;
  inline bool has_player() const;
  inline void clear_player();
  static const int kPlayerFieldNumber = 1;
  inline ::google::protobuf::int32 player() const;
  inline void set_player(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ClientInfo)
 private:
  inline void set_has_player();
  inline void clear_has_player();

  ::google::protobuf::int32 player_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  #ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
  friend void  protobuf_AddDesc_clientinfo_2eproto_impl();
  #else
  friend void  protobuf_AddDesc_clientinfo_2eproto();
  #endif
  friend void protobuf_AssignDesc_clientinfo_2eproto();
  friend void protobuf_ShutdownFile_clientinfo_2eproto();

  void InitAsDefaultInstance();
  static ClientInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientInfo

// required int32 player = 1;
inline bool ClientInfo::has_player() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientInfo::set_has_player() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientInfo::clear_has_player() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientInfo::clear_player() {
  player_ = 0;
  clear_has_player();
}
inline ::google::protobuf::int32 ClientInfo::player() const {
  return player_;
}
inline void ClientInfo::set_player(::google::protobuf::int32 value) {
  set_has_player();
  player_ = value;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_clientinfo_2eproto__INCLUDED
